#include<iostream>
#include<math.h>
#include<string>
using namespace std;
struct node{
	//The nodes of the binary tree store: 
    
    node* parent;
    // 1) Address to the parent node
    
    node* leftChild;
    // 2) Address to the left child of the node
    
    node* rightChild;
    // 3) Address to the right child of the node 
    
    int state;
    // 4) State(00, 01, 10 or 11) that the node holds (as per the DFA)
    
    int level;								
    // 5) Level is the height of the node starting with the root (root->level = 0)

    int transition;							
    // 6) transition is the two input bits that are the part of the path,
    //	  required to reach the node from it's parent.
    										
}*root;										
// root node of the tree is declared here.

//Below is the function reverseString() to reverse a string. We will need this to get the correct path while
//tracing back to root from a leaf of tree.
void reverseString(string& str) 			
{ 
	
    int n = str.length(); 
    
    for (int i = 0; i < n / 2; i++) 
        swap(str[i], str[n - i - 1]); 
} 

//Below is the function difference() that return the number of bits that differ between two strings.
//We will need this function while finding the surviving path.

int difference(string,string);

int difference(string s1,string s2){

int result=0;

	for(int i=0;i<s1.length();i++)
		if(s1[i]!=s2[i])
			result++;

	return result;
}

//This function returns value of the number when we enter the base and its power as its arguments.
int power(int,int);

int power(int x,int y){

    int result=1;

    for(int i=0;i<y;i++)
    	result = result * x;

    return result;
}

//The getPath() function returns the string of a path tracing back from a node(leaf) to the root of 
//the binary tree using the reverseString() function that we have defined earlier.
string getPath(node* y)
{
	string s;
    string result="";

   	while(y->parent!=NULL)
   	{

   		switch(y->transition)
   		{

   			case 00: s="00";
   			break;

   			case 01: s="01";
   			break;

   			case 10: s="10";
   			break;

   			case 11: s="11";
   			break;

   			default: s="error";
   		}

		reverseString(s);
		result  = result + s;

   		y = y->parent;

   	}

   	reverseString(result);

   	return result;
}

int main(){
    string inputString, surviving_path;
    
    //Accepts the inputString of even length from the user
    cin>>inputString;
    if(inputString.length()%2==1)
    {
    	cout<<"The length of the inputString is should be even. Please run the program again."<<endl;		
    	exit(0);
    }
    
    int surviving_path_index, min_difference=1000000;
    
    //Here the value of length is set to half the length of inputString + 1
    int length = (inputString.length()/2)+1;
    
    //Binary tree declaration
    struct node *binary_tree[length][power(2,length)];
    
	//The below two nested for-loops sets up entire binary tree for the rest of the code.
    for(int level=0;level<length;level++)
    {
   
      	for(int j=0;j<power(2,level);j++)
       	{
   
			//Allocating memory to the required number of nodes.
       		binary_tree[level][j] = (struct node*)malloc(sizeof(struct node));
       		
       		//For root.
       		if(level == 0)
            {
  
                root = binary_tree[level][j];
                
                //If the node is root(i.e. level = 0), the parent of root will be NULL
                root->parent = NULL;
                
                root->state = 00;
                
                root->level = level;
                
                root->transition = 1234;
            }
            
            //For leaves
            else if(level == length-1)
            {
                
                binary_tree[level][j]->parent = binary_tree[level-1][j/2];
                
                //For leaves of the tree left and right children will be NULL.
                binary_tree[level][j]->leftChild = NULL;
                binary_tree[level][j]->rightChild = NULL;
                
                if((j+4)%4==0)
                {
                   binary_tree[level][j]->state = 00;
                   binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 00) ? 00 : 11;
                }
                
                else if((j+3)%4==0)
                {
                    binary_tree[level][j]->state = 10;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 00) ? 11 : 00;
                }
                
                else if((j+2)%4==0)
                {
                    binary_tree[level][j]->state = 01;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 10) ? 01 : 10;
                }
                
                else
                {
                    binary_tree[level][j]->state = 11;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 11) ? 01 : 10;
                }
                
                binary_tree[level][j]->level = level;
            
            }
            
            //For other branches
            else
            {
                
                binary_tree[level][j]->parent = binary_tree[level-1][j/2];
                
                if((j+4)%4==0)
                {
                    binary_tree[level][j]->state = 00;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 00) ? 00 : 11;
                }
                
                else if((j+3)%4==0)
                {
                    binary_tree[level][j]->state = 10;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 00) ? 11 : 00;
                }
                
                else if((j+2)%4==0)
                {
                    binary_tree[level][j]->state = 01;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 10) ? 01 : 10;
                }
                
                else
                {
                    binary_tree[level][j]->state = 11;
                    binary_tree[level][j]->transition = (binary_tree[level][j]->parent->state == 11) ? 01 : 10;
                }
                
                binary_tree[level][j]->level = level;
            
            }
            
     	}
     	
    }
    
    //As all the nodes have been set up, the below two nested for-loops can set
    //the left and right children addresses of all the nodes.
    for(int level=0;level<length;level++)
    {
    	
     	for(int j=0;j<power(2,level);j++)
       	{
       		
       		if(level == 0)
            {
                root->leftChild = binary_tree[level+1][2*j];
                root->rightChild = binary_tree[level+1][2*j+1];
            }
            
            else if(level != length-1)
            {
                binary_tree[level][j]->leftChild = binary_tree[level+1][2*j];
                binary_tree[level][j]->rightChild = binary_tree[level+1][2*j+1];
            }
        
       	}
       	
    }
	
	//The below for-loop iterates through the level of leaves in the 2D array and gets all
	//possible paths using getPath() function and compares them with the inputString using 
	//difference() function and records the index of the path with minimum difference (Hamming distance)
	//i.e. surviving path.
	for(int j=0;j<power(2,length-1);j+=4)
    {
    	
      	if(difference(inputString,getPath(binary_tree[length-1][j]))<min_difference)
       	{
       		
      		min_difference = difference(inputString,getPath(binary_tree[length-1][j]));
       		
       		surviving_path_index = j;
      	}
      	
    }
    
    //Using the recorded index whole surviving path is obtained using getPath() function.
    surviving_path = getPath(binary_tree[length-1][surviving_path_index]);
    
    //Prints the inputString
    cout<<"Input Path :"<<inputString<<endl;
    
    //Prints the surviving path
    cout<<"Surviving Path :"<<surviving_path<<endl;
    
    //Prints the minimum difference(Hamming Distance)
    cout<<"Minimum Difference:"<<min_difference<<endl;
    
    //Below given code follows the surviving path using pairs of 2 bits at a time, from the root and
    //prints 0 when it moves to a left child or prints 1 when it moves to a right child.
    cout<<"Final Output :";
    
    int transition;
    
    node* y=root;
    
    for(int i=0;i<2*(length-1);i+=2)
    {
    	
       	if(surviving_path[i]=='0' && surviving_path[i+1]=='0')
       		transition = 0;
       	
       	else if(surviving_path[i]=='0' && surviving_path[i+1]=='1')
       		transition = 1;
       
       	else if(surviving_path[i]=='1' && surviving_path[i+1]=='0')
       		transition = 10;
       
       	else 
       		transition = 11;
       
       	if(y->leftChild->transition == transition)
       	{
       		
       		cout<<"0";
       		y = y->leftChild;
       	
    	}
       	
       	else
       	{
       		
       		cout<<"1";
       		y = y->rightChild;
       	
       	}
   
    }
    
}

/*
					::::TEST CASE::::
	
	WHEN WE ENTER : 1101100 IN THE CONVOLUTIONAL ENCODER,
	
	IT RETURNS THE OUTPUT AS : 11101000101011,
	
	WHEN THIS OUTPUT PASSES THROUGH THE BSC CHANNEL SOME ERRORS ARE INTRODUCED INTO THE STRING,
	
	IT RETURNS THE OUTPUT AS : 01101000001011 ( 2 BITS HAVE BEEN FLIPPED.)
	
	TO TEST THE PROGRAM YOU CAN ENTER 01101000001011 IN THE STDIN AND RUN THE PROGRAM.
	
	SEE IF THE OUTPUT OF THE PROGRAM IS SAME AS THE INPUT OF THE ENCODER OR (i.e. 1101100) OR NOT.
*/